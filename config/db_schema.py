# config/db_schema.py

# SQL DDL for Banks table, tailored for different database types.
# Use a dictionary to store schemas for each DB type.

BANKS_TABLE_SCHEMA = {
    'postgresql': """
    CREATE TABLE banks (
        bank_id SERIAL PRIMARY KEY,
        bank_name VARCHAR(255) UNIQUE NOT NULL
    )
    """,
    'oracle': """
    CREATE TABLE banks (
        bank_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
        bank_name VARCHAR2(255) UNIQUE NOT NULL
    )
    """
}

# SQL DDL for Reviews table, tailored for different database types.
REVIEWS_TABLE_SCHEMA = {
    'postgresql': """
    CREATE TABLE reviews (
        review_pk SERIAL PRIMARY KEY,
        review_id VARCHAR(255) UNIQUE NOT NULL,
        review_text TEXT NOT NULL,
        rating INT NOT NULL,
        review_date DATE NOT NULL,
        bank_id INT NOT NULL,
        sentiment_label VARCHAR(50),
        sentiment_score NUMERIC(5, 4),
        identified_themes VARCHAR(500),
        user_name VARCHAR(255),
        app_version VARCHAR(50),
        source VARCHAR(100) NOT NULL,
        CONSTRAINT fk_bank
            FOREIGN KEY (bank_id)
            REFERENCES banks (bank_id) ON DELETE CASCADE
    )
    """,
    'oracle': """
    CREATE TABLE reviews (
        review_pk NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
        review_id VARCHAR2(255) UNIQUE NOT NULL,
        review_text CLOB NOT NULL,
        rating NUMBER(1) NOT NULL,
        review_date DATE NOT NULL,
        bank_id NUMBER NOT NULL,
        sentiment_label VARCHAR2(50),
        sentiment_score NUMBER(5, 4),
        identified_themes VARCHAR2(500),
        user_name VARCHAR2(255),
        app_version VARCHAR2(50),
        source VARCHAR2(100) NOT NULL,
        CONSTRAINT fk_bank_reviews
            FOREIGN KEY (bank_id)
            REFERENCES banks (bank_id) ON DELETE CASCADE
    )
    """
}